<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>N-Gram | L.E.R Academic</title><link>https://rongyi.ai/tag/n-gram/</link><atom:link href="https://rongyi.ai/tag/n-gram/index.xml" rel="self" type="application/rss+xml"/><description>N-Gram</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 Yi Rong</copyright><lastBuildDate>Wed, 27 Apr 2022 15:52:59 +0800</lastBuildDate><image><url>https://rongyi.ai/media/icon_hucf03f274847a1149dd55649cb0f12563_327173_512x512_fill_lanczos_center_3.png</url><title>N-Gram</title><link>https://rongyi.ai/tag/n-gram/</link></image><item><title>CSE256 Assignment 3: Language Modeling</title><link>https://rongyi.ai/report/cse256-a3-report/</link><pubDate>Wed, 27 Apr 2022 15:52:59 +0800</pubDate><guid>https://rongyi.ai/report/cse256-a3-report/</guid><description>&lt;p>In this report, we discuss the various ways of building probabilistic language models, specifically N-grams. Using the given corpora from three different domains, we first evaluate the reference Unigram implementation provided in the starter code in Section 2. Then we propose our Trigram approach in Section 3, with the implementation details explained inSection 3.1. We show that our approach outperforms the Unigram baseline in almost every performance metric, in Section 3.2 and 3.3. Finally we explore the possibility of adapting our language model from one corpus to another, and demonstrated significant improvement in perplexity in Section 4. Finally we conclude our report in Section 5.&lt;/p>
&lt;p>For the Content-aware Language Model experiments, we implemented a generic N-gram model with two optimizations:&lt;/p>
&lt;ul>
&lt;li>Interpolation: The probability estimates from N-gram down to unigram are mixed and weighted (3.1.1), and the the weights λs are dynamically tuned using &lt;strong>EM Algorithm&lt;/strong> (3.1.2).&lt;/li>
&lt;li>Smoothing: Instead of using Laplace Smoothing (add-1), we added hyper-parameter k and implemented &lt;strong>Add-k Smoothing&lt;/strong>, with k being tuned on a dev set (3.1.3).&lt;/li>
&lt;li>Low frequency cut-off: Taking a parameter min_freq, we remove all the rare item in vocab and treat them as “UNK”&lt;/li>
&lt;/ul></description></item></channel></rss>